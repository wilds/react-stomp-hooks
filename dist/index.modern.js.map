{"version":3,"file":"index.modern.js","sources":["../src/context/StompContext.tsx","../src/components/StompSessionProvider.tsx","../src/hooks/useSubscription.tsx","../src/hooks/useSubscriptionInteractive.tsx","../src/hooks/useStompClient.tsx","../src/hoc/withStompClient.tsx","../src/hoc/withSubscription.tsx"],"sourcesContent":["import { createContext } from 'react';\r\nimport { StompSessionProviderContext } from '../interfaces/StompSessionProviderContext';\r\n\r\nconst StompContext = createContext<StompSessionProviderContext | undefined>(\r\n  undefined\r\n);\r\n\r\nexport default StompContext;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport StompContext from '../context/StompContext';\r\nimport SockJS from 'sockjs-client';\r\nimport {\r\n  Client,\r\n  IStompSocket,\r\n  messageCallbackType,\r\n  StompHeaders\r\n} from '@stomp/stompjs';\r\nimport { StompSessionProviderProps } from '../interfaces/StompSessionProviderProps';\r\nimport { StompSessionSubscription } from '../interfaces/StompSessionSubscription';\r\n\r\n/**\r\n * The StompSessionProvider manages the STOMP connection\r\n * All Hooks and HOCs in this library require an ancestor of this type.\r\n * The URL to connect to can be specified via the url prop.\r\n * Depending on the Schema of the URL either Sockjs or a raw Websocket is used.\r\n * You can override this behavior with the brokerURL or webSocketFactory props, which will then be forwarded to @stomp/stompjs\r\n * Custom @stomp/stompjs options can be used as props.\r\n * Please consult the @stomp/stompjs documentation for more information.\r\n */\r\nfunction StompSessionProvider(props: StompSessionProviderProps) {\r\n  let { url, children, stompClientOptions, ...stompOptions } = props;\r\n\r\n  // Support old API\r\n  if (stompClientOptions) stompOptions = stompClientOptions;\r\n\r\n  const [client, setClient] = useState<Client | undefined>(undefined);\r\n  const subscriptionRequests = useRef(new Map());\r\n\r\n  useEffect(() => {\r\n    const _client = new Client(stompOptions);\r\n\r\n    if (!stompOptions.brokerURL && !stompOptions.webSocketFactory) {\r\n      _client.webSocketFactory = function () {\r\n        const parsedUrl = new URL(url, window?.location?.href);\r\n        if (parsedUrl.protocol === 'http:' || parsedUrl.protocol === 'https:') {\r\n          return new SockJS(url) as IStompSocket;\r\n        } else if (\r\n          parsedUrl.protocol === 'ws:' ||\r\n          parsedUrl.protocol === 'wss:'\r\n        ) {\r\n          return new WebSocket(url) as IStompSocket;\r\n        } else throw new Error('Protocol not supported');\r\n      };\r\n    }\r\n\r\n    _client.onConnect = function (frame) {\r\n      if (stompOptions.onConnect) stompOptions.onConnect(frame);\r\n\r\n      subscriptionRequests.current.forEach((value) => {\r\n        value.subscription = _client.subscribe(\r\n          value.destination,\r\n          value.callback,\r\n          value.headers\r\n        );\r\n      });\r\n    };\r\n\r\n    if (!stompOptions.onStompError) {\r\n      _client.onStompError = function (frame) {\r\n        throw frame;\r\n      };\r\n    }\r\n\r\n    _client.activate();\r\n    setClient(_client);\r\n\r\n    return () => {\r\n      _client.deactivate();\r\n    };\r\n  }, [url, ...Object.values(stompOptions)]);\r\n\r\n  const subscribe = (\r\n    destination: string,\r\n    callback: messageCallbackType,\r\n    headers: StompHeaders = {}\r\n  ) => {\r\n    const subscriptionId = Math.random().toString(36).substr(2, 9);\r\n    const subscriptionRequest: StompSessionSubscription = {\r\n      destination,\r\n      callback,\r\n      headers\r\n    };\r\n\r\n    subscriptionRequests.current.set(subscriptionId, subscriptionRequest);\r\n\r\n    if (client && client.connected) {\r\n      subscriptionRequest.subscription = client.subscribe(\r\n        destination,\r\n        callback,\r\n        headers\r\n      );\r\n    }\r\n\r\n    return () => {\r\n      const subscriptionData = subscriptionRequests.current.get(subscriptionId);\r\n\r\n      if (subscriptionData.subscription) {\r\n        subscriptionData.subscription.unsubscribe();\r\n      }\r\n\r\n      subscriptionRequests.current.delete(subscriptionId);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <StompContext.Provider\r\n      value={{\r\n        client,\r\n        subscribe\r\n      }}\r\n    >\r\n      {children}\r\n    </StompContext.Provider>\r\n  );\r\n}\r\n\r\nexport default StompSessionProvider;\r\n","import { useContext, useEffect, useRef } from 'react';\r\nimport StompContext from '../context/StompContext';\r\nimport { messageCallbackType, StompHeaders } from '@stomp/stompjs';\r\n\r\n/**\r\n *\r\n * @param destinations The destinations to subscribe to. Can be a string for a single destination or an array of strings for multiple.\r\n * @param onMessage Callback called when a message arrives for this subscription\r\n * @param headers Additional Headers for this subscription, consult @stomp/stompjs docs.\r\n */\r\nfunction useSubscription(\r\n  destinations: string | string[],\r\n  onMessage: messageCallbackType,\r\n  headers: StompHeaders = {}\r\n) {\r\n  const stompContext = useContext(StompContext);\r\n\r\n  if (stompContext === undefined)\r\n    throw new Error(\r\n      'There must be a StompSessionProvider as Ancestor of all Stomp Hooks and HOCs'\r\n    );\r\n\r\n  const callbackRef = useRef<messageCallbackType>(onMessage);\r\n  const _destinations = Array.isArray(destinations)\r\n    ? destinations\r\n    : [destinations];\r\n\r\n  callbackRef.current = onMessage;\r\n\r\n  useEffect(() => {\r\n    const cleanUpFunctions: (() => void)[] = [];\r\n\r\n    _destinations.forEach((_destination) =>\r\n      cleanUpFunctions.push(\r\n        stompContext.subscribe(\r\n          _destination,\r\n          (message) => {\r\n            callbackRef.current(message);\r\n          },\r\n          headers\r\n        )\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      cleanUpFunctions.forEach((_cleanUpFunction) => {\r\n        _cleanUpFunction();\r\n      });\r\n    };\r\n  }, [...Object.values(_destinations), ...Object.values(headers)]);\r\n}\r\n\r\nexport default useSubscription;\r\n","import { useContext, useEffect, useRef } from 'react';\r\nimport StompContext from '../context/StompContext';\r\nimport { messageCallbackType, StompHeaders } from '@stomp/stompjs';\r\n\r\n/**\r\n *\r\n * @param destinations The destinations to subscribe to. Can be a string for a single destination or an array of strings for multiple.\r\n * @param onMessage Callback called when a message arrives for this subscription\r\n * @param headers Additional Headers for this subscription, consult @stomp/stompjs docs.\r\n */\r\nfunction useSubscriptionInteractive(\r\n  destinations: string | string[],\r\n  onMessage: messageCallbackType,\r\n  headers: StompHeaders = {},\r\n) {\r\n  const stompContext = useContext(StompContext);\r\n\r\n  if (stompContext === undefined)\r\n    throw new Error(\r\n      'There must be a StompSessionProvider as Ancestor of all Stomp Hooks and HOCs'\r\n    );\r\n\r\n  const callbackRef = useRef<messageCallbackType>(onMessage);\r\n  const _destinations = Array.isArray(destinations)\r\n    ? destinations\r\n    : [destinations];\r\n\r\n  callbackRef.current = onMessage;\r\n\r\n  const cleanUpFunctions: (() => void)[] = [];\r\n\r\n  const subscribe = () => {\r\n    unsubscribe();\r\n    _destinations.forEach((_destination) =>\r\n      cleanUpFunctions.push(\r\n        stompContext.subscribe(\r\n          _destination,\r\n          (message) => {\r\n            callbackRef.current(message);\r\n          },\r\n          headers\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  const unsubscribe = () => {\r\n    cleanUpFunctions.forEach((_cleanUpFunction) => {\r\n      _cleanUpFunction();\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [unsubscribe]);\r\n\r\n  return [subscribe, unsubscribe];\r\n}\r\n\r\nexport default useSubscriptionInteractive;\r\n","import { useContext } from 'react';\r\nimport StompContext from '../context/StompContext';\r\nimport { StompSessionProviderContext } from '../interfaces/StompSessionProviderContext';\r\n\r\n/**\r\n * Returns the Stomp Client from @stomp/stompjs\r\n */\r\nfunction useStompClient() {\r\n  const context = useContext<StompSessionProviderContext | undefined>(\r\n    StompContext\r\n  );\r\n\r\n  if (context === undefined)\r\n    throw new Error(\r\n      'There must be a StompSessionProvider as Ancestor of all Stomp Hooks and HOCs'\r\n    );\r\n\r\n  return context.client;\r\n}\r\n\r\nexport default useStompClient;\r\n","import React from 'react';\r\nimport useStompClient from '../hooks/useStompClient';\r\n\r\nfunction withStompClient<P>(WrappedComponent: React.ComponentType<P>) {\r\n  return (props: P) => {\r\n    const stompClient = useStompClient();\r\n    return <WrappedComponent stompClient={stompClient} {...props} />;\r\n  };\r\n}\r\n\r\nexport default withStompClient;\r\n","import React, { useRef } from 'react';\r\nimport useSubscription from '../hooks/useSubscription';\r\nimport { StompHeaders } from '@stomp/stompjs';\r\nimport {\r\n  MessageReceiverInterface,\r\n  StompMessageReceiver\r\n} from '../interfaces/StompMessageReceiver';\r\nimport { IMessage } from '@stomp/stompjs/esm6/i-message';\r\n\r\nfunction withSubscription<P>(\r\n  WrappedComponent: StompMessageReceiver<P>,\r\n  destinations: string | string[],\r\n  headers: StompHeaders = {}\r\n) {\r\n  return (props: P) => {\r\n    const ref = useRef<MessageReceiverInterface>();\r\n    useSubscription(\r\n      destinations,\r\n      (message: IMessage) => {\r\n        if (ref.current) ref.current.onMessage(message);\r\n      },\r\n      headers\r\n    );\r\n\r\n    // @ts-ignore\r\n    return <WrappedComponent ref={ref} {...props} />;\r\n  };\r\n}\r\n\r\nexport default withSubscription;\r\n"],"names":["StompContext","createContext","undefined","StompSessionProvider","props","url","children","stompClientOptions","stompOptions","useState","client","setClient","subscriptionRequests","useRef","Map","useEffect","_client","Client","brokerURL","webSocketFactory","parsedUrl","URL","window","location","href","protocol","SockJS","WebSocket","Error","onConnect","frame","current","forEach","value","subscription","subscribe","destination","callback","headers","onStompError","activate","deactivate","Object","values","subscriptionId","Math","random","toString","substr","subscriptionRequest","set","connected","subscriptionData","get","unsubscribe","React","Provider","useSubscription","destinations","onMessage","stompContext","useContext","callbackRef","_destinations","Array","isArray","cleanUpFunctions","_destination","push","message","_cleanUpFunction","useSubscriptionInteractive","useStompClient","context","withStompClient","WrappedComponent","stompClient","withSubscription","ref"],"mappings":"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"}